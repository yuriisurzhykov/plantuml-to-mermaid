import streamlit as st
from viewer.mermaid_viewer import render_mermaid
from components.plantuml_components_parser import PlantUMLComponentParser
from components.mermaid_components_generator import MermaidGenerator
from classes.plantuml_class_parser import PlantUMLClassParser
from classes.mermaid_class_generator import MermaidClassGenerator
from sequence.plantuml_sequence_parser import PlantUMLSequenceParser
from sequence.mermaid_sequence_generator import MermaidSequenceGenerator
from resources.image import get_base64_image


def main():
    st.set_page_config(page_title="PlantUML to Mermaid Converter", layout="wide")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ Base64
    try:
        logo_b64 = get_base64_image("resources/project_logo.png")
        html_logo = f'<div style="text-align: center;"><img src="data:image/png;base64,{logo_b64}" alt="Logo" width="350"></div>'
        st.markdown(html_logo, unsafe_allow_html=True)
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: " + str(e))
    
    st.title("PlantUML to Mermaid Converter")
    st.markdown("–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤–∞—à PlantUML –∫–æ–¥ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π Mermaid —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")

    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    diagram_type = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã",
        ["üß© Components", "üìö Class", "üîÑ Sequence"],
        index=0
    )
    st.sidebar.markdown(
        """
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
        1. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à PlantUML –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ.
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **Convert to Mermaid**.
        3. –°–ª–µ–≤–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Mermaid –∫–æ–¥, —Å–ø—Ä–∞–≤–∞ ‚Äì –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–≥—Ä–∞–º–º—ã.
        """
    )

    # Placeholder-—Ç–µ–∫—Å—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
    if "Components" in diagram_type:
        placeholder_text = (
            '@startuml\n'
            'component "UI (Compose Screen)" as UI\n'
            'component "ViewModel\\n(State Holder)" as VM\n'
            'component "Domain/Repository\\n(Business Logic)" as BL\n\n'
            'UI --> VM : User events (intent calls)\n'
            'VM --> BL : Requests data or actions\n'
            'VM <-- BL : New data/result\n'
            'UI <-- VM : Updated UI State\n'
            '@enduml'
        )
    elif "Class" in diagram_type:
        placeholder_text = (
            '@startuml\n'
            'class Customer {\n'
            '    +int id\n'
            '    +String name\n'
            '    +login()\n'
            '}\n'
            'class Order {\n'
            '    +int orderId\n'
            '    +date orderDate\n'
            '    +calculateTotal()\n'
            '}\n'
            'Customer "1" --> "0..*" Order : places\n'
            'Customer <|-- VIPCustomer\n'
            '@enduml'
        )
    elif "Sequence" in diagram_type:
        placeholder_text = (
            '@startuml\n'
            'actor User\n'
            'participant "Mobile App" as App\n'
            'participant "Auth Service" as Auth\n'
            'participant "Payment Gateway" as Payment\n'
            'participant "Order Service" as Order\n\n'
            'User -> App: Login\n'
            'activate App\n'
            'App -> Auth: Validate Credentials\n'
            'alt Valid Credentials\n'
            '    Auth -> App: Success\n'
            '    deactivate Auth\n'
            '    App -> Payment: Initiate Payment\n'
            '    activate Payment\n'
            '    alt Payment Approved\n'
            '         Payment -> Order: Create Order\n'
            '         activate Order\n'
            '         Order -> Payment: Confirm Order\n'
            '         deactivate Order\n'
            '         Payment -> App: Payment Successful\n'
            '    else Payment Declined\n'
            '         Payment -> App: Payment Failed\n'
            '    end\n'
            '    deactivate Payment\n'
            'else Invalid Credentials\n'
            '    Auth -> App: Failure\n'
            '    deactivate Auth\n'
            'end\n'
            'App -> User: Show Result\n'
            'deactivate App\n'
            '@enduml'
        )
    else:
        placeholder_text = ""

    st.subheader("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à PlantUML –∫–æ–¥")
    plantuml_code = st.text_area("PlantUML Code", height=400, placeholder=placeholder_text)

    convert_button = st.button("Convert to Mermaid")

    if convert_button and plantuml_code.strip():
        if "Components" in diagram_type:
            parser = PlantUMLComponentParser()
            diagram = parser.parse(plantuml_code)
            generator = MermaidGenerator()
            mermaid_code = generator.generate(diagram)
        elif "Class" in diagram_type:
            parser = PlantUMLClassParser()
            diagram = parser.parse(plantuml_code)
            generator = MermaidClassGenerator()
            mermaid_code = generator.generate(diagram)
        elif "Sequence" in diagram_type:
            parser = PlantUMLSequenceParser()
            diagram = parser.parse(plantuml_code)
            generator = MermaidSequenceGenerator()
            mermaid_code = generator.generate(diagram)
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### Generated Mermaid Code")
            st.code(mermaid_code, language="mermaid")
        with col2:
            st.markdown("### Diagram Preview")
            render_mermaid(mermaid_code, height=500)
    else:
        st.info("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à PlantUML –∫–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ **Convert to Mermaid**.")

if __name__ == "__main__":
    main()
